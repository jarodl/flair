#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 114)
  def parse(code, show_tokens=false)
    @tokens = Flair::Lexer.new(code).tokenize
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    24,    24,    27,    26,    29,    22,    32,    21,    34,    37,
    23,    23,     4,     6,    20,     9,    11,    12,    14,    16,
    18,     1,     4,     6,    26,     9,    11,    12,    14,    16,
    18,     1,     4,     6,    19,     9,    11,    12,    14,    16,
    18,     1,     4,     6,    26,     9,    11,    12,    14,    16,
    18,     1,     4,     6,    26,     9,    11,    12,    14,    16,
    18,     1,    29 ]

racc_action_check = [
    36,    15,    18,    17,    20,    13,    22,     6,    26,    36,
    36,    15,    27,    27,     4,    27,    27,    27,    27,    27,
    27,    27,    29,    29,    28,    29,    29,    29,    29,    29,
    29,    29,    19,    19,     1,    19,    19,    19,    19,    19,
    19,    19,    25,    25,    33,    25,    25,    25,    25,    25,
    25,    25,     0,     0,    35,     0,     0,     0,     0,     0,
     0,     0,    21 ]

racc_action_pointer = [
    50,    18,   nil,   nil,     3,   nil,    -4,   nil,   nil,   nil,
   nil,   nil,   nil,     5,   nil,    -3,   nil,   -12,   -14,    30,
    -8,    50,     6,   nil,   nil,    40,    -2,    10,     9,    20,
   nil,   nil,   nil,    29,   nil,    39,    -4,   nil ]

racc_action_default = [
    -1,   -21,    -6,    -7,   -27,    -8,   -27,    -9,   -10,   -14,
   -11,   -15,   -16,   -27,   -17,    -2,   -18,    -3,   -19,   -27,
   -27,   -27,   -27,   -13,   -12,    -5,   -27,   -27,   -23,   -27,
   -24,   -25,    38,    -4,   -20,   -22,   -27,   -26 ]

racc_goto_table = [
    15,    28,    30,    31,    13,   nil,   nil,    33,   nil,    35,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36 ]

racc_goto_check = [
     2,     3,    11,    11,     1,   nil,   nil,     3,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     4,     0,   -18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -18 ]

racc_goto_default = [
   nil,   nil,   nil,    17,    25,     2,     3,     5,     7,     8,
    10,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 18, :_reduce_1,
  1, 18, :_reduce_2,
  1, 19, :_reduce_3,
  3, 19, :_reduce_4,
  2, 19, :_reduce_5,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 22, :_reduce_14,
  1, 22, :_reduce_15,
  1, 22, :_reduce_16,
  1, 22, :_reduce_17,
  1, 22, :_reduce_18,
  1, 23, :_reduce_19,
  3, 23, :_reduce_20,
  1, 24, :_reduce_21,
  3, 25, :_reduce_22,
  3, 25, :_reduce_23,
  3, 26, :_reduce_24,
  3, 27, :_reduce_25,
  3, 28, :_reduce_26 ]

racc_reduce_n = 27

racc_shift_n = 38

racc_token_table = {
  false => 0,
  :error => 1,
  :CLASS => 2,
  :ID => 3,
  :NEWLINE => 4,
  :NUMBER => 5,
  :STRING => 6,
  :TRUE => 7,
  :FALSE => 8,
  :NIL => 9,
  :IDENTIFIER => 10,
  :CONSTANT => 11,
  :INDENT => 12,
  :DEDENT => 13,
  ";" => 14,
  "." => 15,
  "=" => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CLASS",
  "ID",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\".\"",
  "\"=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Constant",
  "Assign",
  "Class",
  "Id",
  "Block" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_14(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_15(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_19(val, _values, result)
     result = CallNode.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_20(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_21(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_22(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_23(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_24(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_25(val, _values, result)
     result = IdNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_26(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
